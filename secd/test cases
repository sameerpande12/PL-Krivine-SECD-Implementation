
let g = [("Y", Tbool)];;

(* Explicit type declaration for function abstraction *)
let e = exp_parser "\\X:Tint.X" rho;;
let t = Tfunc(Tint, Tint);;
hastype g e t;; (* should return true *)

(* Types of both if-branches should match. *)
let e = exp_parser "\\X:Tint.(if Y then X else T fi)" rho;;
let t = Tfunc(Tint, Tbool);;
hastype g e t;; (* should be false, as the two branches do not have same type *)

(* Explicit type declaration for definition. *)
let e = exp_parser "let def X:Tbool = Y in X end" rho;;
let t = Tbool;;
hastype g e t;; (* should return true *)

(* Incorrect type declaration for definition. *)
let e = exp_parser "let def X:Tint = Y in X end" rho;;
let t = Tbool;;
hastype g e t;; (* should return false, as the claimed type of X is not possible w.r.t. type assumptions g *)

(* Sequential composition of definitions. *)
let e = exp_parser "let  def Z:Tint = 2*X in Z end" rho;;
let t = Tint;;
hastype g e t;; (* should return true *)

(* Parallel composition of definitions. *)
let e = exp_parser "let def X:Tint = 3 || def Z:Tint = 2*X in Z end" rho;;
let t = Tint;;
hastype g e t;; (* should return false, as in second branch X is undefined *)
(* assume that the set of variables in the two branches for parallel composition will be disjoint. *)

(* Nested let bindings. *)
let e = exp_parser "let def X:Tint = 3 in (let def X:Tbool = T in X end) end" rho;;
let t = Tbool;;
hastype g e t;; (* should return true *)

(* More complicated type declarations *)
let e = exp_parser "let def Foo:Tint -> (Tint * Tbool) = \\X:Tint.(X,Y) in Foo(5) end" rho;;
let t = Ttuple([Tint; Tbool]);;
hastype g e t;; (* should return true *)

(* To support the following kind of type-checks, you could introduce a new constructor in the "type" datatype, say "TypeVar of string", which represents a named type variable and which could take any possible type. *)
let e = exp_parser "proj(1,2) if T then (3,T) else (4,F) fi" rho;;
let t = Tint;;
hastype g e t;; (* should return true *)

(* You may have to implement some equation solving to handle such cases. *)
let e = exp_parser "proj(1,2)( if X then (3,X) else (4,4) fi)" rho;;
let t = Tint;;
hastype g e t;; (* should return false since the ifte expression forces one branch to be of type Ttuple(Tint, Tbool) and the other branch to be of type Ttuple(Tint, Tint *)
